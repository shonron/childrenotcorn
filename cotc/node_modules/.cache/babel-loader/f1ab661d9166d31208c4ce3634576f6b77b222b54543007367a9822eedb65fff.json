{"ast":null,"code":"import User from './User.js';\n/** Persona states as indicated by https://developer.valvesoftware.com/wiki/Steam_Web_API#Public_Data */\nexport var UserPersonaState;\n(function (UserPersonaState) {\n  UserPersonaState[UserPersonaState[\"Offline\"] = 0] = \"Offline\";\n  UserPersonaState[UserPersonaState[\"Online\"] = 1] = \"Online\";\n  UserPersonaState[UserPersonaState[\"Busy\"] = 2] = \"Busy\";\n  UserPersonaState[UserPersonaState[\"Away\"] = 3] = \"Away\";\n  UserPersonaState[UserPersonaState[\"Snooze\"] = 4] = \"Snooze\";\n  UserPersonaState[UserPersonaState[\"LookingToTrade\"] = 5] = \"LookingToTrade\";\n  UserPersonaState[UserPersonaState[\"LookingToPlay\"] = 6] = \"LookingToPlay\";\n})(UserPersonaState || (UserPersonaState = {}));\nexport default class UserSummary extends User {\n  /** The user's avatar in varous sizes */\n  avatar;\n  /** Link to the user's profile */\n  url;\n  /** Is this user's profile visible to you */\n  visible;\n  /** The user's persona state. Always 0 if profile is private */\n  personaState;\n  /** Flags for personState. Seems to always be 0 */\n  personaStateFlags;\n  /** If this user allows comments on their profile */\n  allowsComments;\n  /** The nickname this user has set */\n  nickname;\n  /** Unix Timestamp when the user last logged off */\n  lastLogOffTimestamp;\n  /** Unix Timestamp when the profile was created if visible */\n  createdTimestamp;\n  /** The user's real name if set and visible */\n  realName;\n  /** The user's primary group ID if set and visible */\n  primaryGroupID;\n  /** The game the user is currently playing if any */\n  gameID;\n  /** The name of the game the user is currently playing if any */\n  gameName;\n  /** The IP:PORT of the game server the user is currently playing on if any */\n  gameServerIP;\n  /** The SteamID of the game server the user is currently playing on if any */\n  gameServerID;\n  /** The user's country code if set and visible */\n  countryCode;\n  /** The user's state code if set and visible */\n  stateCode;\n  /** The user's city ID if set and visible */\n  cityID;\n  constructor(data) {\n    super(data);\n    this.avatar = {\n      small: data.avatar,\n      medium: data.avatarmedium,\n      large: data.avatarfull,\n      hash: data.avatarhash\n    };\n    this.url = data.profileurl;\n    this.createdTimestamp = data.timecreated;\n    this.lastLogOffTimestamp = data.lastlogoff;\n    this.realName = data.realname;\n    this.nickname = data.personaname;\n    this.primaryGroupID = data.primaryclanid;\n    this.personaState = data.personastate;\n    this.personaStateFlags = data.personastateflags;\n    this.allowsComments = Boolean(data.commentpermission);\n    this.visible = data.communityvisibilitystate === 3;\n    this.gameID = data.gameid;\n    this.gameName = data.gameextrainfo;\n    this.gameServerIP = data.gameserverip;\n    this.gameServerID = data.gameserversteamid;\n    this.countryCode = data.loccountrycode;\n    this.stateCode = data.locstatecode;\n    this.cityID = data.loccityid;\n  }\n  /** Date when this user's account was created */\n  get createdAt() {\n    return this.createdTimestamp === undefined ? undefined : new Date(this.createdTimestamp * 1000);\n  }\n  /** Date when this user last logged off */\n  get lastLogOffAt() {\n    return this.lastLogOffTimestamp === undefined ? undefined : new Date(this.lastLogOffTimestamp * 1000);\n  }\n}","map":{"version":3,"names":["User","UserPersonaState","UserSummary","avatar","url","visible","personaState","personaStateFlags","allowsComments","nickname","lastLogOffTimestamp","createdTimestamp","realName","primaryGroupID","gameID","gameName","gameServerIP","gameServerID","countryCode","stateCode","cityID","constructor","data","small","medium","avatarmedium","large","avatarfull","hash","avatarhash","profileurl","timecreated","lastlogoff","realname","personaname","primaryclanid","personastate","personastateflags","Boolean","commentpermission","communityvisibilitystate","gameid","gameextrainfo","gameserverip","gameserversteamid","loccountrycode","locstatecode","loccityid","createdAt","undefined","Date","lastLogOffAt"],"sources":["C:/Users/union/Documents/reactcotc/cotc/node_modules/steamapi/dist/src/structures/UserSummary.js"],"sourcesContent":["import User from './User.js';\n/** Persona states as indicated by https://developer.valvesoftware.com/wiki/Steam_Web_API#Public_Data */\nexport var UserPersonaState;\n(function (UserPersonaState) {\n    UserPersonaState[UserPersonaState[\"Offline\"] = 0] = \"Offline\";\n    UserPersonaState[UserPersonaState[\"Online\"] = 1] = \"Online\";\n    UserPersonaState[UserPersonaState[\"Busy\"] = 2] = \"Busy\";\n    UserPersonaState[UserPersonaState[\"Away\"] = 3] = \"Away\";\n    UserPersonaState[UserPersonaState[\"Snooze\"] = 4] = \"Snooze\";\n    UserPersonaState[UserPersonaState[\"LookingToTrade\"] = 5] = \"LookingToTrade\";\n    UserPersonaState[UserPersonaState[\"LookingToPlay\"] = 6] = \"LookingToPlay\";\n})(UserPersonaState || (UserPersonaState = {}));\nexport default class UserSummary extends User {\n    /** The user's avatar in varous sizes */\n    avatar;\n    /** Link to the user's profile */\n    url;\n    /** Is this user's profile visible to you */\n    visible;\n    /** The user's persona state. Always 0 if profile is private */\n    personaState;\n    /** Flags for personState. Seems to always be 0 */\n    personaStateFlags;\n    /** If this user allows comments on their profile */\n    allowsComments;\n    /** The nickname this user has set */\n    nickname;\n    /** Unix Timestamp when the user last logged off */\n    lastLogOffTimestamp;\n    /** Unix Timestamp when the profile was created if visible */\n    createdTimestamp;\n    /** The user's real name if set and visible */\n    realName;\n    /** The user's primary group ID if set and visible */\n    primaryGroupID;\n    /** The game the user is currently playing if any */\n    gameID;\n    /** The name of the game the user is currently playing if any */\n    gameName;\n    /** The IP:PORT of the game server the user is currently playing on if any */\n    gameServerIP;\n    /** The SteamID of the game server the user is currently playing on if any */\n    gameServerID;\n    /** The user's country code if set and visible */\n    countryCode;\n    /** The user's state code if set and visible */\n    stateCode;\n    /** The user's city ID if set and visible */\n    cityID;\n    constructor(data) {\n        super(data);\n        this.avatar = {\n            small: data.avatar,\n            medium: data.avatarmedium,\n            large: data.avatarfull,\n            hash: data.avatarhash,\n        };\n        this.url = data.profileurl;\n        this.createdTimestamp = data.timecreated;\n        this.lastLogOffTimestamp = data.lastlogoff;\n        this.realName = data.realname;\n        this.nickname = data.personaname;\n        this.primaryGroupID = data.primaryclanid;\n        this.personaState = data.personastate;\n        this.personaStateFlags = data.personastateflags;\n        this.allowsComments = Boolean(data.commentpermission);\n        this.visible = data.communityvisibilitystate === 3;\n        this.gameID = data.gameid;\n        this.gameName = data.gameextrainfo;\n        this.gameServerIP = data.gameserverip;\n        this.gameServerID = data.gameserversteamid;\n        this.countryCode = data.loccountrycode;\n        this.stateCode = data.locstatecode;\n        this.cityID = data.loccityid;\n    }\n    /** Date when this user's account was created */\n    get createdAt() {\n        return this.createdTimestamp === undefined ? undefined : new Date(this.createdTimestamp * 1000);\n    }\n    /** Date when this user last logged off */\n    get lastLogOffAt() {\n        return this.lastLogOffTimestamp === undefined ? undefined : new Date(this.lastLogOffTimestamp * 1000);\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}