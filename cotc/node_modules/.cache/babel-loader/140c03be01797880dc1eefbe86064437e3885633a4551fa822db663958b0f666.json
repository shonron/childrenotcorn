{"ast":null,"code":"import nodeFetch from 'node-fetch';\nconst reg = /<h1>(.*)<\\/h1>/;\n/**\n *\n * @param url\n * @param options\n * @returns\n */\nexport async function fetch(url, options) {\n  // console.log(url);\n  const res = await nodeFetch(url, options);\n  if (res.status === 400) {\n    const data = await res.text();\n    throw new Error(data.match(reg)?.[1] || data);\n  }\n  if (res.status !== 200) throw new Error(res.statusText);\n  return res.json();\n}\n;\n// App IDs are positive integers that are divisible by 10\nconst reID = /^\\d{17}$/;\nexport function assertApp(apps) {\n  if (!Array.isArray(apps)) apps = [apps];\n  if (apps.some(app => !(app > 0 && app % 1 === 0))) throw new TypeError('Invalid app ID provided');\n}\n// User IDs are 17 digit numbers\nexport function assertID(ids) {\n  if (!Array.isArray(ids)) ids = [ids];\n  if (ids.some(id => !reID.test(id))) throw new TypeError('Invalid user ID provided');\n}","map":{"version":3,"names":["nodeFetch","reg","fetch","url","options","res","status","data","text","Error","match","statusText","json","reID","assertApp","apps","Array","isArray","some","app","TypeError","assertID","ids","id","test"],"sources":["C:/Users/union/Documents/reactcotc/cotc/node_modules/steamapi/dist/src/utils.js"],"sourcesContent":["import nodeFetch from 'node-fetch';\nconst reg = /<h1>(.*)<\\/h1>/;\n/**\n *\n * @param url\n * @param options\n * @returns\n */\nexport async function fetch(url, options) {\n    // console.log(url);\n    const res = await nodeFetch(url, options);\n    if (res.status === 400) {\n        const data = await res.text();\n        throw new Error(data.match(reg)?.[1] || data);\n    }\n    if (res.status !== 200)\n        throw new Error(res.statusText);\n    return res.json();\n}\n;\n// App IDs are positive integers that are divisible by 10\nconst reID = /^\\d{17}$/;\nexport function assertApp(apps) {\n    if (!Array.isArray(apps))\n        apps = [apps];\n    if (apps.some(app => !(app > 0 && app % 1 === 0)))\n        throw new TypeError('Invalid app ID provided');\n}\n// User IDs are 17 digit numbers\nexport function assertID(ids) {\n    if (!Array.isArray(ids))\n        ids = [ids];\n    if (ids.some(id => !reID.test(id)))\n        throw new TypeError('Invalid user ID provided');\n}\n"],"mappings":"AAAA,OAAOA,SAAS,MAAM,YAAY;AAClC,MAAMC,GAAG,GAAG,gBAAgB;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,eAAeC,KAAKA,CAACC,GAAG,EAAEC,OAAO,EAAE;EACtC;EACA,MAAMC,GAAG,GAAG,MAAML,SAAS,CAACG,GAAG,EAAEC,OAAO,CAAC;EACzC,IAAIC,GAAG,CAACC,MAAM,KAAK,GAAG,EAAE;IACpB,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;IAC7B,MAAM,IAAIC,KAAK,CAACF,IAAI,CAACG,KAAK,CAACT,GAAG,CAAC,GAAG,CAAC,CAAC,IAAIM,IAAI,CAAC;EACjD;EACA,IAAIF,GAAG,CAACC,MAAM,KAAK,GAAG,EAClB,MAAM,IAAIG,KAAK,CAACJ,GAAG,CAACM,UAAU,CAAC;EACnC,OAAON,GAAG,CAACO,IAAI,CAAC,CAAC;AACrB;AACA;AACA;AACA,MAAMC,IAAI,GAAG,UAAU;AACvB,OAAO,SAASC,SAASA,CAACC,IAAI,EAAE;EAC5B,IAAI,CAACC,KAAK,CAACC,OAAO,CAACF,IAAI,CAAC,EACpBA,IAAI,GAAG,CAACA,IAAI,CAAC;EACjB,IAAIA,IAAI,CAACG,IAAI,CAACC,GAAG,IAAI,EAAEA,GAAG,GAAG,CAAC,IAAIA,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,EAC7C,MAAM,IAAIC,SAAS,CAAC,yBAAyB,CAAC;AACtD;AACA;AACA,OAAO,SAASC,QAAQA,CAACC,GAAG,EAAE;EAC1B,IAAI,CAACN,KAAK,CAACC,OAAO,CAACK,GAAG,CAAC,EACnBA,GAAG,GAAG,CAACA,GAAG,CAAC;EACf,IAAIA,GAAG,CAACJ,IAAI,CAACK,EAAE,IAAI,CAACV,IAAI,CAACW,IAAI,CAACD,EAAE,CAAC,CAAC,EAC9B,MAAM,IAAIH,SAAS,CAAC,0BAA0B,CAAC;AACvD"},"metadata":{},"sourceType":"module","externalDependencies":[]}