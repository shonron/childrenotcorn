{"ast":null,"code":"class SteamID {\n  /**\r\n   * List of possible universes\r\n   * @static\r\n   * @returns {{DEV: number, INTERNAL: number, PUBLIC: number, INVALID: number, BETA: number}}\r\n   */\n  static get Universe() {\n    return {\n      INVALID: 0,\n      PUBLIC: 1,\n      BETA: 2,\n      INTERNAL: 3,\n      DEV: 4\n    };\n  }\n\n  /**\r\n   * List of possible types\r\n   * @static\r\n   * @returns {{CHAT: number, P2P_SUPER_SEEDER: number, GAMESERVER: number, CLAN: number, ANON_USER: number, MULTISEAT: number, ANON_GAMESERVER: number, PENDING: number, CONTENT_SERVER: number, INVALID: number, INDIVIDUAL: number}}\r\n   */\n  static get Type() {\n    return {\n      INVALID: 0,\n      INDIVIDUAL: 1,\n      MULTISEAT: 2,\n      GAMESERVER: 3,\n      ANON_GAMESERVER: 4,\n      PENDING: 5,\n      CONTENT_SERVER: 6,\n      CLAN: 7,\n      CHAT: 8,\n      P2P_SUPER_SEEDER: 9,\n      ANON_USER: 10\n    };\n  }\n\n  /**\r\n   * List of named instances\r\n   * @static\r\n   * @returns {{ALL: number, CONSOLE: number, WEB: number, DESKTOP: number}}\r\n   */\n  static get Instance() {\n    return {\n      ALL: 0,\n      DESKTOP: 1,\n      CONSOLE: 2,\n      WEB: 4\n    };\n  }\n\n  /**\r\n   * Mapping of SteamID types to their characters\r\n   * @static\r\n   * @returns {object}\r\n   */\n  static get TypeChars() {\n    return {\n      [SteamID.Type.INVALID]: 'I',\n      [SteamID.Type.INDIVIDUAL]: 'U',\n      [SteamID.Type.MULTISEAT]: 'M',\n      [SteamID.Type.GAMESERVER]: 'G',\n      [SteamID.Type.ANON_GAMESERVER]: 'A',\n      [SteamID.Type.PENDING]: 'P',\n      [SteamID.Type.CONTENT_SERVER]: 'C',\n      [SteamID.Type.CLAN]: 'g',\n      [SteamID.Type.CHAT]: 'T',\n      [SteamID.Type.ANON_USER]: 'a'\n    };\n  }\n\n  /**\r\n   * Mask to be used to get the AccountID out of a 64-bit SteamID\r\n   * @static\r\n   * @returns {number}\r\n   */\n  static get AccountIDMask() {\n    return 0xFFFFFFFF;\n  }\n\n  /**\r\n   * Mask to be used to get the instance out of the upper 32 bits of a 64-bit SteamID\r\n   * @static\r\n   * @returns {number}\r\n   */\n  static get AccountInstanceMask() {\n    return 0x000FFFFF;\n  }\n\n  /**\r\n   * Flags in SteamID instance for chat type IDs\r\n   * @static\r\n   * @returns {{Lobby: number, Clan: number, MMSLobby: number}}\r\n   */\n  static get ChatInstanceFlags() {\n    return {\n      Clan: SteamID.AccountInstanceMask + 1 >> 1,\n      Lobby: SteamID.AccountInstanceMask + 1 >> 2,\n      MMSLobby: SteamID.AccountInstanceMask + 1 >> 3\n    };\n  }\n\n  /**\r\n   * Create a new SteamID object.\r\n   * @param {string|BigInt} [input] - BigInt containing 64-bit SteamID, or string containing 64-bit SteamID/Steam2/Steam3 text formats. If omitted, creates a blank SteamID object.\r\n   */\n  constructor(input) {\n    this.universe = SteamID.Universe.INVALID;\n    this.type = SteamID.Type.INVALID;\n    this.instance = SteamID.Instance.ALL;\n    this.accountid = 0;\n    if (!input) {\n      // Use the default invalid values\n      return;\n    }\n    let matches;\n    if (typeof input == 'bigint' || typeof input == 'string' && input.match(/^\\d+$/)) {\n      // 64-bit ID\n      let num = BigInt(input);\n      this.accountid = Number(num & BigInt(SteamID.AccountIDMask));\n      this.instance = Number(num >> 32n & BigInt(SteamID.AccountInstanceMask));\n      this.type = Number(num >> 52n & 0xFn);\n      this.universe = Number(num >> 56n);\n    } else if (matches = input.match(/^STEAM_([0-5]):([0-1]):([0-9]+)$/)) {\n      // Steam2 ID\n      let [_, universe, mod, accountid] = matches;\n      this.universe = parseInt(universe, 10) || SteamID.Universe.PUBLIC; // If it's 0, turn it into 1 for public\n      this.type = SteamID.Type.INDIVIDUAL;\n      this.instance = SteamID.Instance.DESKTOP;\n      this.accountid = parseInt(accountid, 10) * 2 + parseInt(mod, 10);\n    } else if (matches = input.match(/^\\[([a-zA-Z]):([0-5]):([0-9]+)(:[0-9]+)?]$/)) {\n      // Steam3 ID\n      let [_, typeChar, universe, accountid, instanceid] = matches;\n      this.universe = parseInt(universe, 10);\n      this.accountid = parseInt(accountid, 10);\n      if (instanceid) {\n        this.instance = parseInt(instanceid.substring(1), 10);\n      }\n      switch (typeChar) {\n        case 'U':\n          // Individual. If we don't have an explicit instanceid, default to DESKTOP.\n          this.type = SteamID.Type.INDIVIDUAL;\n          if (!instanceid) {\n            this.instance = SteamID.Instance.DESKTOP;\n          }\n          break;\n        case 'c':\n          this.instance |= SteamID.ChatInstanceFlags.Clan;\n          this.type = SteamID.Type.CHAT;\n          break;\n        case 'L':\n          this.instance |= SteamID.ChatInstanceFlags.Lobby;\n          this.type = SteamID.Type.CHAT;\n          break;\n        default:\n          this.type = getTypeFromChar(typeChar);\n      }\n    } else {\n      throw new Error(`Unknown SteamID input format \"${input}\"`);\n    }\n  }\n\n  /**\r\n   * Creates a new SteamID object from an individual account ID.\r\n   * @static\r\n   * @param {int|BigInt|string} accountid\r\n   * @returns {SteamID}\r\n   */\n  static fromIndividualAccountID(accountid) {\n    if (typeof accountid == 'bigint') {\n      accountid = Number(accountid);\n    }\n    let parsed = parseInt(accountid, 10);\n    if (isNaN(parsed)) {\n      // writes to stderr in node\n      console.error(`[steamid] Warning: SteamID.fromIndividualAccountID() called with NaN argument \"${accountid}\" (type \"${typeof accountid}\")`);\n      parsed = 0;\n    }\n    let sid = new SteamID();\n    sid.universe = SteamID.Universe.PUBLIC;\n    sid.type = SteamID.Type.INDIVIDUAL;\n    sid.instance = SteamID.Instance.DESKTOP;\n    sid.accountid = parsed;\n    return sid;\n  }\n\n  /**\r\n   * Returns whether Steam would consider a given ID to be \"valid\".\r\n   * This does not check whether the given ID belongs to a real account, nor does it check that the given ID is for\r\n   * an individual account or in the public universe.\r\n   * @returns {boolean}\r\n   */\n  isValid() {\n    fixTypes(this);\n    if (this.type <= SteamID.Type.INVALID || this.type > SteamID.Type.ANON_USER) {\n      return false;\n    }\n    if (this.universe <= SteamID.Universe.INVALID || this.universe > SteamID.Universe.DEV) {\n      return false;\n    }\n    if (this.type == SteamID.Type.INDIVIDUAL && (this.accountid === 0 || this.instance > SteamID.Instance.WEB)) {\n      return false;\n    }\n    if (this.type == SteamID.Type.CLAN && (this.accountid === 0 || this.instance != SteamID.Instance.ALL)) {\n      return false;\n    }\n\n    // noinspection RedundantIfStatementJS\n    if (this.type == SteamID.Type.GAMESERVER && this.accountid === 0) {\n      return false;\n    }\n    return true;\n  }\n\n  /**\r\n   * Returns whether this SteamID is valid and belongs to an individual user in the public universe with a desktop instance.\r\n   * This is what most people think of when they think of a SteamID. Does not check whether the account actually exists.\r\n   * @returns {boolean}\r\n   */\n  isValidIndividual() {\n    return this.universe == SteamID.Universe.PUBLIC && this.type == SteamID.Type.INDIVIDUAL && this.instance == SteamID.Instance.DESKTOP && this.isValid();\n  }\n\n  /**\r\n   * Checks whether the given ID is for a legacy group chat.\r\n   * @returns {boolean}\r\n   */\n  isGroupChat() {\n    fixTypes(this);\n    return !!(this.type == SteamID.Type.CHAT && this.instance & SteamID.ChatInstanceFlags.Clan);\n  }\n\n  /**\r\n   * Check whether the given Id is for a game lobby.\r\n   * @returns {boolean}\r\n   */\n  isLobby() {\n    fixTypes(this);\n    return !!(this.type == SteamID.Type.CHAT && (this.instance & SteamID.ChatInstanceFlags.Lobby || this.instance & SteamID.ChatInstanceFlags.MMSLobby));\n  }\n\n  /**\r\n   * Renders the ID in Steam2 format (e.g. \"STEAM_0:0:23071901\")\r\n   * @param {boolean} [newerFormat=false] - If true, use 1 as the first digit instead of 0 for the public universe\r\n   * @returns {string}\r\n   */\n  steam2(newerFormat = false) {\n    fixTypes(this);\n    if (this.type != SteamID.Type.INDIVIDUAL) {\n      throw new Error('Can\\'t get Steam2 rendered ID for non-individual ID');\n    } else {\n      let universe = this.universe;\n      if (!newerFormat && universe === 1) {\n        universe = 0;\n      }\n      return `STEAM_${universe}:${this.accountid & 1}:${Math.floor(this.accountid / 2)}`;\n    }\n  }\n\n  /**\r\n   * Renders the ID in Steam2 format (e.g. \"STEAM_0:0:23071901\")\r\n   * @param {boolean} [newerFormat=false] - If true, use 1 as the first digit instead of 0 for the public universe\r\n   * @returns {string}\r\n   */\n  getSteam2RenderedID(newerFormat = false) {\n    return this.steam2(newerFormat);\n  }\n\n  /**\r\n   * Renders the ID in Steam3 format (e.g. \"[U:1:46143802]\")\r\n   * @returns {string}\r\n   */\n  steam3() {\n    fixTypes(this);\n    let typeChar = SteamID.TypeChars[this.type] || 'i';\n    if (this.instance & SteamID.ChatInstanceFlags.Clan) {\n      typeChar = 'c';\n    } else if (this.instance & SteamID.ChatInstanceFlags.Lobby) {\n      typeChar = 'L';\n    }\n    let shouldRenderInstance = this.type == SteamID.Type.ANON_GAMESERVER || this.type == SteamID.Type.MULTISEAT || this.type == SteamID.Type.INDIVIDUAL && this.instance != SteamID.Instance.DESKTOP;\n    return `[${typeChar}:${this.universe}:${this.accountid}${shouldRenderInstance ? `:${this.instance}` : ''}]`;\n  }\n\n  /**\r\n   * Renders the ID in Steam3 format (e.g. \"[U:1:46143802]\")\r\n   * @returns {string}\r\n   */\n  getSteam3RenderedID() {\n    return this.steam3();\n  }\n\n  /**\r\n   * Renders the ID in 64-bit decimal format, as a string (e.g. \"76561198006409530\")\r\n   * @returns {string}\r\n   */\n  getSteamID64() {\n    return this.getBigIntID().toString();\n  }\n\n  /**\r\n   * Renders the ID in 64-bit decimal format, as a string (e.g. \"76561198006409530\")\r\n   * @returns {string}\r\n   */\n  toString() {\n    return this.getSteamID64();\n  }\n\n  /**\r\n   * Renders the ID in 64-bit decimal format, as a BigInt (e.g. 76561198006409530n)\r\n   * @returns {BigInt}\r\n   */\n  getBigIntID() {\n    fixTypes(this);\n    let universe = BigInt(this.universe);\n    let type = BigInt(this.type);\n    let instance = BigInt(this.instance);\n    let accountid = BigInt(this.accountid);\n    return universe << 56n | type << 52n | instance << 32n | accountid;\n  }\n}\n\n// Private methods/functions\nfunction getTypeFromChar(typeChar) {\n  let charEntry = Object.entries(SteamID.TypeChars).find(([entryType, entryChar]) => entryChar == typeChar);\n  return charEntry ? parseInt(charEntry[0], 10) : SteamID.Type.INVALID;\n}\nfunction fixTypes(sid) {\n  ['universe', 'type', 'instance', 'accountid'].forEach(prop => {\n    if (typeof sid[prop] == 'bigint') {\n      // Not sure how this would ever happen, but fix it\n      sid[prop] = Number(sid[prop]);\n    } else {\n      let val = parseInt(sid[prop], 10);\n      if (!isNaN(val)) {\n        sid[prop] = val;\n      }\n    }\n  });\n}\nmodule.exports = SteamID;","map":{"version":3,"names":["SteamID","Universe","INVALID","PUBLIC","BETA","INTERNAL","DEV","Type","INDIVIDUAL","MULTISEAT","GAMESERVER","ANON_GAMESERVER","PENDING","CONTENT_SERVER","CLAN","CHAT","P2P_SUPER_SEEDER","ANON_USER","Instance","ALL","DESKTOP","CONSOLE","WEB","TypeChars","AccountIDMask","AccountInstanceMask","ChatInstanceFlags","Clan","Lobby","MMSLobby","constructor","input","universe","type","instance","accountid","matches","match","num","BigInt","Number","_","mod","parseInt","typeChar","instanceid","substring","getTypeFromChar","Error","fromIndividualAccountID","parsed","isNaN","console","error","sid","isValid","fixTypes","isValidIndividual","isGroupChat","isLobby","steam2","newerFormat","Math","floor","getSteam2RenderedID","steam3","shouldRenderInstance","getSteam3RenderedID","getSteamID64","getBigIntID","toString","charEntry","Object","entries","find","entryType","entryChar","forEach","prop","val","module","exports"],"sources":["C:/Users/union/Documents/reactcotc/cotc/node_modules/steamid/index.js"],"sourcesContent":["class SteamID {\r\n\t/**\r\n\t * List of possible universes\r\n\t * @static\r\n\t * @returns {{DEV: number, INTERNAL: number, PUBLIC: number, INVALID: number, BETA: number}}\r\n\t */\r\n\tstatic get Universe() {\r\n\t\treturn {\r\n\t\t\tINVALID: 0,\r\n\t\t\tPUBLIC: 1,\r\n\t\t\tBETA: 2,\r\n\t\t\tINTERNAL: 3,\r\n\t\t\tDEV: 4\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * List of possible types\r\n\t * @static\r\n\t * @returns {{CHAT: number, P2P_SUPER_SEEDER: number, GAMESERVER: number, CLAN: number, ANON_USER: number, MULTISEAT: number, ANON_GAMESERVER: number, PENDING: number, CONTENT_SERVER: number, INVALID: number, INDIVIDUAL: number}}\r\n\t */\r\n\tstatic get Type() {\r\n\t\treturn {\r\n\t\t\tINVALID: 0,\r\n\t\t\tINDIVIDUAL: 1,\r\n\t\t\tMULTISEAT: 2,\r\n\t\t\tGAMESERVER: 3,\r\n\t\t\tANON_GAMESERVER: 4,\r\n\t\t\tPENDING: 5,\r\n\t\t\tCONTENT_SERVER: 6,\r\n\t\t\tCLAN: 7,\r\n\t\t\tCHAT: 8,\r\n\t\t\tP2P_SUPER_SEEDER: 9,\r\n\t\t\tANON_USER: 10\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * List of named instances\r\n\t * @static\r\n\t * @returns {{ALL: number, CONSOLE: number, WEB: number, DESKTOP: number}}\r\n\t */\r\n\tstatic get Instance() {\r\n\t\treturn {\r\n\t\t\tALL: 0,\r\n\t\t\tDESKTOP: 1,\r\n\t\t\tCONSOLE: 2,\r\n\t\t\tWEB: 4\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Mapping of SteamID types to their characters\r\n\t * @static\r\n\t * @returns {object}\r\n\t */\r\n\tstatic get TypeChars() {\r\n\t\treturn {\r\n\t\t\t[SteamID.Type.INVALID]: 'I',\r\n\t\t\t[SteamID.Type.INDIVIDUAL]: 'U',\r\n\t\t\t[SteamID.Type.MULTISEAT]: 'M',\r\n\t\t\t[SteamID.Type.GAMESERVER]: 'G',\r\n\t\t\t[SteamID.Type.ANON_GAMESERVER]: 'A',\r\n\t\t\t[SteamID.Type.PENDING]: 'P',\r\n\t\t\t[SteamID.Type.CONTENT_SERVER]: 'C',\r\n\t\t\t[SteamID.Type.CLAN]: 'g',\r\n\t\t\t[SteamID.Type.CHAT]: 'T',\r\n\t\t\t[SteamID.Type.ANON_USER]: 'a'\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Mask to be used to get the AccountID out of a 64-bit SteamID\r\n\t * @static\r\n\t * @returns {number}\r\n\t */\r\n\tstatic get AccountIDMask() { return 0xFFFFFFFF; }\r\n\r\n\t/**\r\n\t * Mask to be used to get the instance out of the upper 32 bits of a 64-bit SteamID\r\n\t * @static\r\n\t * @returns {number}\r\n\t */\r\n\tstatic get AccountInstanceMask() { return 0x000FFFFF; }\r\n\r\n\t/**\r\n\t * Flags in SteamID instance for chat type IDs\r\n\t * @static\r\n\t * @returns {{Lobby: number, Clan: number, MMSLobby: number}}\r\n\t */\r\n\tstatic get ChatInstanceFlags() {\r\n\t\treturn {\r\n\t\t\tClan: (SteamID.AccountInstanceMask + 1) >> 1,\r\n\t\t\tLobby: (SteamID.AccountInstanceMask + 1) >> 2,\r\n\t\t\tMMSLobby: (SteamID.AccountInstanceMask + 1) >> 3\r\n\t\t};\r\n\t}\r\n\r\n\t/**\r\n\t * Create a new SteamID object.\r\n\t * @param {string|BigInt} [input] - BigInt containing 64-bit SteamID, or string containing 64-bit SteamID/Steam2/Steam3 text formats. If omitted, creates a blank SteamID object.\r\n\t */\r\n\tconstructor(input) {\r\n\t\tthis.universe = SteamID.Universe.INVALID;\r\n\t\tthis.type = SteamID.Type.INVALID;\r\n\t\tthis.instance = SteamID.Instance.ALL;\r\n\t\tthis.accountid = 0;\r\n\r\n\t\tif (!input) {\r\n\t\t\t// Use the default invalid values\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tlet matches;\r\n\t\tif (typeof input == 'bigint' || (typeof input == 'string' && input.match(/^\\d+$/))) {\r\n\t\t\t// 64-bit ID\r\n\t\t\tlet num = BigInt(input);\r\n\t\t\tthis.accountid = Number(num & BigInt(SteamID.AccountIDMask));\r\n\t\t\tthis.instance = Number((num >> 32n) & BigInt(SteamID.AccountInstanceMask));\r\n\t\t\tthis.type = Number((num >> 52n) & 0xFn);\r\n\t\t\tthis.universe = Number(num >> 56n);\r\n\t\t} else if ((matches = input.match(/^STEAM_([0-5]):([0-1]):([0-9]+)$/))) {\r\n\t\t\t// Steam2 ID\r\n\t\t\tlet [_, universe, mod, accountid] = matches;\r\n\r\n\t\t\tthis.universe = parseInt(universe, 10) || SteamID.Universe.PUBLIC; // If it's 0, turn it into 1 for public\r\n\t\t\tthis.type = SteamID.Type.INDIVIDUAL;\r\n\t\t\tthis.instance = SteamID.Instance.DESKTOP;\r\n\t\t\tthis.accountid = (parseInt(accountid, 10) * 2) + parseInt(mod, 10);\r\n\t\t} else if ((matches = input.match(/^\\[([a-zA-Z]):([0-5]):([0-9]+)(:[0-9]+)?]$/))) {\r\n\t\t\t// Steam3 ID\r\n\t\t\tlet [_, typeChar, universe, accountid, instanceid] = matches;\r\n\r\n\t\t\tthis.universe = parseInt(universe, 10);\r\n\t\t\tthis.accountid = parseInt(accountid, 10);\r\n\r\n\t\t\tif (instanceid) {\r\n\t\t\t\tthis.instance = parseInt(instanceid.substring(1), 10);\r\n\t\t\t}\r\n\r\n\t\t\tswitch (typeChar) {\r\n\t\t\t\tcase 'U':\r\n\t\t\t\t\t// Individual. If we don't have an explicit instanceid, default to DESKTOP.\r\n\t\t\t\t\tthis.type = SteamID.Type.INDIVIDUAL;\r\n\t\t\t\t\tif (!instanceid) {\r\n\t\t\t\t\t\tthis.instance = SteamID.Instance.DESKTOP;\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'c':\r\n\t\t\t\t\tthis.instance |= SteamID.ChatInstanceFlags.Clan;\r\n\t\t\t\t\tthis.type = SteamID.Type.CHAT;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tcase 'L':\r\n\t\t\t\t\tthis.instance |= SteamID.ChatInstanceFlags.Lobby;\r\n\t\t\t\t\tthis.type = SteamID.Type.CHAT;\r\n\t\t\t\t\tbreak;\r\n\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthis.type = getTypeFromChar(typeChar);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthrow new Error(`Unknown SteamID input format \"${input}\"`);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Creates a new SteamID object from an individual account ID.\r\n\t * @static\r\n\t * @param {int|BigInt|string} accountid\r\n\t * @returns {SteamID}\r\n\t */\r\n\tstatic fromIndividualAccountID(accountid) {\r\n\t\tif (typeof accountid == 'bigint') {\r\n\t\t\taccountid = Number(accountid);\r\n\t\t}\r\n\r\n\t\tlet parsed = parseInt(accountid, 10);\r\n\t\tif (isNaN(parsed)) {\r\n\t\t\t// writes to stderr in node\r\n\t\t\tconsole.error(`[steamid] Warning: SteamID.fromIndividualAccountID() called with NaN argument \"${accountid}\" (type \"${typeof accountid}\")`);\r\n\t\t\tparsed = 0;\r\n\t\t}\r\n\r\n\t\tlet sid = new SteamID();\r\n\t\tsid.universe = SteamID.Universe.PUBLIC;\r\n\t\tsid.type = SteamID.Type.INDIVIDUAL;\r\n\t\tsid.instance = SteamID.Instance.DESKTOP;\r\n\t\tsid.accountid = parsed;\r\n\t\treturn sid;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether Steam would consider a given ID to be \"valid\".\r\n\t * This does not check whether the given ID belongs to a real account, nor does it check that the given ID is for\r\n\t * an individual account or in the public universe.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValid() {\r\n\t\tfixTypes(this);\r\n\r\n\t\tif (this.type <= SteamID.Type.INVALID || this.type > SteamID.Type.ANON_USER) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.universe <= SteamID.Universe.INVALID || this.universe > SteamID.Universe.DEV) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.type == SteamID.Type.INDIVIDUAL && (this.accountid === 0 || this.instance > SteamID.Instance.WEB)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\tif (this.type == SteamID.Type.CLAN && (this.accountid === 0 || this.instance != SteamID.Instance.ALL)) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\t// noinspection RedundantIfStatementJS\r\n\t\tif (this.type == SteamID.Type.GAMESERVER && this.accountid === 0) {\r\n\t\t\treturn false;\r\n\t\t}\r\n\r\n\t\treturn true;\r\n\t}\r\n\r\n\t/**\r\n\t * Returns whether this SteamID is valid and belongs to an individual user in the public universe with a desktop instance.\r\n\t * This is what most people think of when they think of a SteamID. Does not check whether the account actually exists.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisValidIndividual() {\r\n\t\treturn this.universe == SteamID.Universe.PUBLIC\r\n\t\t\t&& this.type == SteamID.Type.INDIVIDUAL\r\n\t\t\t&& this.instance == SteamID.Instance.DESKTOP\r\n\t\t\t&& this.isValid();\r\n\t}\r\n\r\n\t/**\r\n\t * Checks whether the given ID is for a legacy group chat.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisGroupChat() {\r\n\t\tfixTypes(this);\r\n\t\treturn !!(this.type == SteamID.Type.CHAT && this.instance & SteamID.ChatInstanceFlags.Clan);\r\n\t}\r\n\r\n\t/**\r\n\t * Check whether the given Id is for a game lobby.\r\n\t * @returns {boolean}\r\n\t */\r\n\tisLobby() {\r\n\t\tfixTypes(this);\r\n\t\treturn !!(this.type == SteamID.Type.CHAT && (this.instance & SteamID.ChatInstanceFlags.Lobby || this.instance & SteamID.ChatInstanceFlags.MMSLobby));\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in Steam2 format (e.g. \"STEAM_0:0:23071901\")\r\n\t * @param {boolean} [newerFormat=false] - If true, use 1 as the first digit instead of 0 for the public universe\r\n\t * @returns {string}\r\n\t */\r\n\tsteam2(newerFormat = false) {\r\n\t\tfixTypes(this);\r\n\t\tif (this.type != SteamID.Type.INDIVIDUAL) {\r\n\t\t\tthrow new Error('Can\\'t get Steam2 rendered ID for non-individual ID');\r\n\t\t} else {\r\n\t\t\tlet universe = this.universe;\r\n\t\t\tif (!newerFormat && universe === 1) {\r\n\t\t\t\tuniverse = 0;\r\n\t\t\t}\r\n\r\n\t\t\treturn `STEAM_${universe}:${this.accountid & 1}:${Math.floor(this.accountid / 2)}`;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in Steam2 format (e.g. \"STEAM_0:0:23071901\")\r\n\t * @param {boolean} [newerFormat=false] - If true, use 1 as the first digit instead of 0 for the public universe\r\n\t * @returns {string}\r\n\t */\r\n\tgetSteam2RenderedID(newerFormat = false) {\r\n\t\treturn this.steam2(newerFormat);\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in Steam3 format (e.g. \"[U:1:46143802]\")\r\n\t * @returns {string}\r\n\t */\r\n\tsteam3() {\r\n\t\tfixTypes(this);\r\n\t\tlet typeChar = SteamID.TypeChars[this.type] || 'i';\r\n\r\n\t\tif (this.instance & SteamID.ChatInstanceFlags.Clan) {\r\n\t\t\ttypeChar = 'c';\r\n\t\t} else if (this.instance & SteamID.ChatInstanceFlags.Lobby) {\r\n\t\t\ttypeChar = 'L';\r\n\t\t}\r\n\r\n\t\tlet shouldRenderInstance = (\r\n\t\t\tthis.type == SteamID.Type.ANON_GAMESERVER ||\r\n\t\t\tthis.type == SteamID.Type.MULTISEAT ||\r\n\t\t\t(\r\n\t\t\t\tthis.type == SteamID.Type.INDIVIDUAL &&\r\n\t\t\t\tthis.instance != SteamID.Instance.DESKTOP\r\n\t\t\t)\r\n\t\t);\r\n\r\n\t\treturn `[${typeChar}:${this.universe}:${this.accountid}${shouldRenderInstance ? `:${this.instance}` : ''}]`;\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in Steam3 format (e.g. \"[U:1:46143802]\")\r\n\t * @returns {string}\r\n\t */\r\n\tgetSteam3RenderedID() {\r\n\t\treturn this.steam3();\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in 64-bit decimal format, as a string (e.g. \"76561198006409530\")\r\n\t * @returns {string}\r\n\t */\r\n\tgetSteamID64() {\r\n\t\treturn this.getBigIntID().toString();\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in 64-bit decimal format, as a string (e.g. \"76561198006409530\")\r\n\t * @returns {string}\r\n\t */\r\n\ttoString() {\r\n\t\treturn this.getSteamID64();\r\n\t}\r\n\r\n\t/**\r\n\t * Renders the ID in 64-bit decimal format, as a BigInt (e.g. 76561198006409530n)\r\n\t * @returns {BigInt}\r\n\t */\r\n\tgetBigIntID() {\r\n\t\tfixTypes(this);\r\n\t\tlet universe = BigInt(this.universe);\r\n\t\tlet type = BigInt(this.type);\r\n\t\tlet instance = BigInt(this.instance);\r\n\t\tlet accountid = BigInt(this.accountid);\r\n\r\n\t\treturn (universe << 56n) | (type << 52n) | (instance << 32n) | accountid;\r\n\t}\r\n}\r\n\r\n// Private methods/functions\r\nfunction getTypeFromChar(typeChar) {\r\n\tlet charEntry = Object.entries(SteamID.TypeChars).find(([entryType, entryChar]) => entryChar == typeChar);\r\n\treturn charEntry ? parseInt(charEntry[0], 10) : SteamID.Type.INVALID;\r\n}\r\n\r\nfunction fixTypes(sid) {\r\n\t['universe', 'type', 'instance', 'accountid'].forEach((prop) => {\r\n\t\tif (typeof sid[prop] == 'bigint') {\r\n\t\t\t// Not sure how this would ever happen, but fix it\r\n\t\t\tsid[prop] = Number(sid[prop]);\r\n\t\t} else {\r\n\t\t\tlet val = parseInt(sid[prop], 10);\r\n\t\t\tif (!isNaN(val)) {\r\n\t\t\t\tsid[prop] = val;\r\n\t\t\t}\r\n\t\t}\r\n\t});\r\n}\r\n\r\nmodule.exports = SteamID;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}