{"ast":null,"code":"import SteamID from 'steamid';\nimport querystring from 'node:querystring';\n// https://stackoverflow.com/a/66726426/7504056\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\nconst Package = require('../../package.json');\nimport { MemoryCacheMap } from './Cache.js';\nimport { fetch, assertApp, assertID } from './utils.js';\nimport UserStats from './structures/UserStats.js';\nimport NewsPost from './structures/NewsPost.js';\nimport Server from './structures/Server.js';\nimport Game from './structures/Game.js';\nimport GameInfo from './structures/GameInfo.js';\nimport GameInfoExtended from './structures/GameInfoExtended.js';\nimport GameInfoBasic from './structures/GameInfoBasic.js';\nimport GameServer from './structures/GameServer.js';\nimport UserAchievements from './structures/UserAchievements.js';\nimport UserBadges from './structures/UserBadges.js';\nimport UserPlaytime from './structures/UserPlaytime.js';\nimport UserBans from './structures/UserBans.js';\nimport UserFriend from './structures/UserFriend.js';\nimport UserServers from './structures/UserServers.js';\nimport UserSummary from './structures/UserSummary.js';\nconst defaultOptions = {\n  language: 'english',\n  currency: 'us',\n  headers: {\n    'User-Agent': `SteamAPI/${Package.version} (https://www.npmjs.com/package/${Package.name})`\n  },\n  baseAPI: 'https://api.steampowered.com',\n  baseStore: 'https://store.steampowered.com/api',\n  baseActions: 'https://steamcommunity.com/actions',\n  inMemoryCacheEnabled: true,\n  gameDetailCacheEnabled: true,\n  gameDetailCacheTTL: 86400000,\n  userResolveCacheEnabled: true,\n  userResolveCacheTTL: 86400000\n};\nexport default class SteamAPI {\n  static reProfileBase = String.raw`(?:(?:(?:(?:https?)?:\\/\\/)?(?:www\\.)?steamcommunity\\.com)?)?\\/?`;\n  static reCommunityID = RegExp(String.raw`^(\\d{17})$`, 'i');\n  static reSteamID2 = RegExp(String.raw`^(STEAM_\\d+:\\d+:\\d+)$`, 'i');\n  static reSteamID3 = RegExp(String.raw`^(\\[U:\\d+:\\d+\\])$`, 'i');\n  static reProfileURL = RegExp(String.raw`${this.reProfileBase}profiles\\/(\\d{17})`, 'i');\n  static reProfileID = RegExp(String.raw`${this.reProfileBase}id\\/([a-z0-9_-]{2,32})`, 'i');\n  static SUCCESS_CODE = 1;\n  language;\n  currency;\n  headers;\n  baseAPI;\n  baseStore;\n  baseActions;\n  gameDetailCache;\n  userResolveCache;\n  key = '';\n  /**\n   * Make a new SteamAPI Client\n   * @param key Key to use for API calls. Key can be generated at https://steamcommunity.com/dev/apikey. If you want to make requests without a key, pass in false\n   * @param options Custom options for default language, HTTP parameters, and caching\n   */\n  constructor(key, options = {}) {\n    if (key !== false) {\n      if (key) {\n        this.key = key;\n      } else {\n        console.warn(['no key provided', 'some methods won\\'t work', 'get one from https://goo.gl/DfNy5s or initialize SteamAPI as new SteamAPI(false) to suppress this warning'].join('\\n'));\n      }\n    }\n    options = {\n      ...defaultOptions,\n      ...options\n    };\n    if (options.inMemoryCacheEnabled) {\n      if (options.gameDetailCacheEnabled && options.gameDetailCacheTTL) this.gameDetailCache = new MemoryCacheMap(options.gameDetailCacheTTL);\n      if (options.userResolveCacheEnabled && options.userResolveCacheTTL) this.userResolveCache = new MemoryCacheMap(options.userResolveCacheTTL);\n    }\n    this.language = options.language;\n    this.currency = options.currency;\n    this.headers = options.headers;\n    this.baseAPI = options.baseAPI;\n    this.baseStore = options.baseStore;\n    this.baseActions = options.baseActions;\n  }\n  /**\n   * Used to make any GET request to the Steam API\n   * @param path Path to request e.g '/IPlayerService/GetOwnedGames/v1?steamid=76561198378422474'\n   * @param base Base API URL\n   * @returns Parse JSON\n   */\n  get(path, params = {}, base = this.baseAPI) {\n    if (this.key) params.key = this.key;\n    return fetch(`${base}${path}?${querystring.stringify(params)}`, this.headers);\n  }\n  /**\n   * Resolve runs through a couple different methods for finding a user's profile ID based on\n   * either their id, username, profile url, vanity url, steamID2, or steamID3.\n   * Rejects promise if a profile couldn't be resolved\n   * @param query Something to resolve like https://steamcommunity.com/id/xDim\n   * @returns Profile ID\n   */\n  async resolve(query) {\n    // community id match, ex. 76561198378422474\n    const communityIDMatch = query.match(SteamAPI.reCommunityID);\n    if (communityIDMatch !== null) return communityIDMatch[1];\n    // url, https://steamcommunity.com/profiles/76561198378422474\n    const urlMatch = query.match(SteamAPI.reProfileURL);\n    if (urlMatch !== null) return urlMatch[1];\n    // Steam 2: STEAM_0:0:209078373\n    const steamID2Match = query.match(SteamAPI.reSteamID2);\n    if (steamID2Match !== null) {\n      const sid = new SteamID(steamID2Match[1]);\n      return sid.getSteamID64();\n    }\n    // Steam 3: [U:1:418156746]\n    const steamID3Match = query.match(SteamAPI.reSteamID3);\n    if (steamID3Match !== null) {\n      const sid = new SteamID(steamID3Match[1]);\n      return sid.getSteamID64();\n    }\n    // vanity id, https://steamcommunity.com/id/xDim\n    const idMatch = query.match(SteamAPI.reProfileID);\n    if (idMatch !== null) {\n      const id = idMatch[1];\n      const cachedID = this.userResolveCache?.get(id);\n      if (cachedID) return cachedID;\n      const json = await this.get('/ISteamUser/ResolveVanityURL/v1', {\n        vanityurl: id\n      });\n      if (json.response.success !== SteamAPI.SUCCESS_CODE) throw new Error(json.response.message);\n      if (this.userResolveCache) this.userResolveCache.set(id, json.response.steamid);\n      return json.response.steamid;\n    }\n    throw new TypeError('Invalid format');\n  }\n  /**\n   * Gets featured categories on Steam store\n   *\n   * <warn>undocumented endpoint -- may be unstable</warn>\n   * @param options More options\n   * @param options.language The language\n   * @param options.currency The currency\n   */\n  getFeaturedCategories({\n    language = this.language,\n    currency = this.currency\n  } = {}) {\n    // TODO: make class for this\n    return this.get('/featuredcategories', {\n      l: language,\n      cc: currency\n    }, this.baseStore);\n  }\n  /**\n   * Gets featured games on Steam store\n   *\n   * <warn>undocumented endpoint -- may be unstable</warn>\n   * @param options More options\n   * @param options.language The language\n   * @param options.currency The currency\n   */\n  getFeaturedGames({\n    language = this.language,\n    currency = this.currency\n  } = {}) {\n    // TODO: make class for this\n    return this.get('/featured', {\n      l: language,\n      cc: currency\n    }, this.baseStore);\n  }\n  /**\n   * Get details for app ID. If an array of more than one app ID is passed in, the parameter &filters=price_overview\n   * will be added to the request since otherwise the server would respond with null\n   *\n   * Note: a game will not have a price_overview field if it is F2P\n   *\n   * <warn>If the array contains invalid app IDs, they will be filtered out</warn>\n   *\n   * <warn>Requests for this endpoint are limited to 200 every 5 minutes</warn>\n   *\n   * <warn>Not every `currency` is supported. Only the following are valid: `us, ca, cc, es, de, fr, ru, nz, au, uk`.</warn>\n   *\n   * <warn>Not every `language` is supported. A list of available languages can be found [here](https://www.ibabbleon.com/Steam-Supported-Languages-API-Codes.html).</warn>\n   * @param app App ID or array of App IDs\n   * @param options More options\n   * @param options.language The language\n   * @param options.currency The currency\n   * @param options.filters Fields to restrict the return results to\n   * @returns If app is number, returns single object. If app is array, returns a mapping of app IDs to objects\n   */\n  async getGameDetails(app, {\n    language = this.language,\n    currency = this.currency,\n    filters = []\n  } = {}) {\n    assertApp(app);\n    const isArr = Array.isArray(app);\n    const key = `${app}-${currency}-${language}`;\n    // For now we're not touching the cache if an array of apps is passed\n    // TODO: maybe cache apps individually if an array is passed?\n    if (!isArr) {\n      const cached = this.gameDetailCache?.get(key);\n      if (cached) return cached;\n    }\n    const details = await this.get('/appdetails', {\n      appids: isArr ? app.join(',') : app,\n      cc: currency,\n      l: language,\n      filters: isArr && app.length > 1 ? 'price_overview' : filters.join(',')\n    }, this.baseStore).then(json => {\n      if (json === null) throw new Error('Failed to find app ID');\n      // TODO: make a class\n      const filtered = {};\n      for (const [k, v] of Object.entries(json)) if (v.success) {\n        const d = v.data;\n        // Convert empty arrays to empty objects for consistency\n        filtered[k] = Array.isArray(d) && d.length === 0 ? {} : d;\n      }\n      if (Object.keys(filtered).length === 0) throw new Error('Failed to find app ID');\n      return isArr ? filtered : filtered[app];\n    });\n    if (!isArr) this.gameDetailCache?.set(key, details);\n    return details;\n  }\n  /**\n   * Get every single app on steam\n   *\n   * Note: Original JSON names are being preserved instead of converting\n   * each element to a class here because there are 186311+ games\n   * that would have to be made into a class.\n   * @returns Array of very basic app info (ID + name)\n   */\n  async getAppList() {\n    // TODO: allow a parameter to be passed in to convert these to a class?\n    return (await this.get('/ISteamApps/GetAppList/v2')).applist.apps;\n  }\n  /**\n   * Get every server associated with a particular host\n   * @param host Host to query (IPv4 or IPv4:queryport)\n   * @returns Info of servers\n   */\n  async getServers(host) {\n    const {\n      response\n    } = await this.get('/ISteamApps/GetServersAtAddress/v1', {\n      addr: host\n    });\n    if (!response.success) throw new Error(response.message);\n    return response.servers.map(server => new Server(server));\n  }\n  /**\n   * Get number of current players for app ID\n   * @param app App ID to get number of current players for\n   * @returns Number of current players\n   */\n  async getGamePlayers(app) {\n    assertApp(app);\n    const json = await this.get('/ISteamUserStats/GetNumberOfCurrentPlayers/v1', {\n      appid: app\n    });\n    if (json.response.result !== SteamAPI.SUCCESS_CODE) throw new Error('No app found');\n    return json.response.player_count;\n  }\n  /**\n   * Get schema for app ID\n   * @param app App ID to get schema for\n   * @param language Language to return strings for (note: does not seem to affect stats; only achievements)\n   * @returns Schema\n   */\n  async getGameSchema(app, language = this.language) {\n    assertApp(app);\n    // TODO: make class for this\n    return (await this.get('/ISteamUserStats/GetSchemaForGame/v2', {\n      appid: app,\n      l: language\n    })).game;\n  }\n  /**\n   * Get a user's achievements for app ID\n   * @param id Steam ID of user\n   * @param app App ID to get achievements for\n   * @param language Language to return strings for\n   * @returns Achievements\n   */\n  async getUserAchievements(id, app, language = this.language) {\n    assertID(id);\n    assertApp(app);\n    const json = await this.get('/ISteamUserStats/GetPlayerAchievements/v1', {\n      steamid: id,\n      appid: app,\n      l: language\n    });\n    if (!json.playerstats.success) throw new Error(json.playerstats.message);\n    return new UserAchievements(json.playerstats);\n  }\n  /**\n   * Get achievement percentages for app ID\n   *\n   * If a game does not hvae any achievements, this will error\n   * @param app App ID to get achievement progress for\n   * @returns Array of object with achievement name and percentage for app ID\n   */\n  async getGameAchievementPercentages(app) {\n    assertApp(app);\n    const json = await this.get('/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2', {\n      gameid: app\n    });\n    return json.achievementpercentages.achievements;\n  }\n  /**\n   * Get a user's stats for app ID\n   * @param id Steam ID of user\n   * @param app App ID to get user stats for\n   * @returns Stats for app ID\n   */\n  async getUserStats(id, app) {\n    assertID(id);\n    assertApp(app);\n    return new UserStats((await this.get('/ISteamUserStats/GetUserStatsForGame/v2', {\n      steamid: id,\n      appid: app\n    })).playerstats);\n  }\n  /**\n   * Get news for app ID\n   * @param app App ID\n   * @param options Additional options for filtering posts\n   * @returns App news for ID\n   */\n  async getGameNews(app, options = {}) {\n    assertApp(app);\n    const params = {\n      appid: app,\n      maxlength: options.maxContentLength,\n      enddate: options.endDate?.getTime(),\n      count: options.count,\n      feeds: options.feeds?.join(','),\n      tags: options.tags?.join(',')\n    };\n    // Filter out options that weren't supplied\n    for (const [k, v] of Object.entries(params)) if (v === undefined) delete params[k];\n    return (await this.get('/ISteamNews/GetNewsForApp/v2', params)).appnews.newsitems.map(item => new NewsPost(item));\n  }\n  /**\n   * Get a user's badges\n   * @param id User ID\n   * @returns User level info and badges\n   */\n  async getUserBadges(id) {\n    assertID(id);\n    return new UserBadges((await this.get('/IPlayerService/GetBadges/v1', {\n      steamid: id\n    })).response);\n  }\n  /**\n   * Get a user's level\n   * @param id User ID\n   * @returns The user's Steam level\n   */\n  async getUserLevel(id) {\n    assertID(id);\n    return (await this.get('/IPlayerService/GetSteamLevel/v1', {\n      steamid: id\n    })).response.player_level;\n  }\n  /**\n   * Get users owned games.\n   * @param id User ID\n   * @param opts Additional options for filtering\n   * @returns Owned games\n   */\n  async getUserOwnedGames(id, opts = {}) {\n    assertID(id);\n    // Same behavior as v3\n    if (opts.includeFreeGames === undefined) opts.includeFreeGames = true;\n    if (opts.language === undefined) opts.language = this.language;\n    if (opts.includeExtendedAppInfo) opts.includeAppInfo = true;\n    const params = {\n      steamid: id,\n      include_appinfo: opts.includeAppInfo,\n      include_played_free_games: opts.includeFreeGames,\n      include_free_sub: opts.includeFreeSubGames,\n      skip_unvetted_apps: opts.includeUnvettedApps === undefined ? undefined : !opts.includeUnvettedApps,\n      include_extended_appinfo: opts.includeExtendedAppInfo,\n      appids_filter: opts.filterApps,\n      language: opts.language\n    };\n    // Filter out options that weren't supplied\n    for (const [k, v] of Object.entries(params)) if (v === undefined) delete params[k];\n    const json = await this.get('/IPlayerService/GetOwnedGames/v1', params);\n    return json.response.games.map(data => {\n      let game;\n      if (opts.includeExtendedAppInfo) game = new GameInfoExtended(data);else if (opts.includeAppInfo) game = new GameInfo(data);else game = new Game(data);\n      return new UserPlaytime(data, game);\n    });\n  }\n  /**\n   * Get a user's recently played games. Note: <UserPlaytime>.game is GameInfo not just Game\n   *\n   * Like getUserOwnedGames() but only returns games played in the last 2 weeks\n   * @param id User ID\n   * @param count Number of results to limit the request to (0 means no limit)\n   * @returns Recently played games and their play times\n   */\n  async getUserRecentGames(id, count = 0) {\n    assertID(id);\n    const json = await this.get('/IPlayerService/GetRecentlyPlayedGames/v1', {\n      steamid: id,\n      count\n    });\n    return json.response.games.map(data => new UserPlaytime(data, new GameInfoBasic(data)));\n  }\n  /**\n   * Get a user's or multipler users' bans. If an array of IDs is passed in, this returns an array of UserBans\n   * @param id User ID(s)\n   * @returns Ban info\n   */\n  async getUserBans(id) {\n    assertID(id);\n    const arr = Array.isArray(id);\n    const json = await this.get('/ISteamUser/GetPlayerBans/v1', {\n      steamids: arr ? id.join(',') : id\n    });\n    const bans = json.players.map(player => new UserBans(player));\n    return arr ? bans : bans[0];\n  }\n  /**\n   * Get a user's friends\n   * @param id User ID\n   * @returns The provided user's friends\n   */\n  async getUserFriends(id) {\n    assertID(id);\n    const json = await this.get('/ISteamUser/GetFriendList/v1', {\n      steamid: id\n    });\n    return json.friendslist.friends.map(friend => new UserFriend(friend));\n  }\n  /**\n   * Get the groups the user is a member of\n   * @param id User ID\n   * @returns Group IDs\n   */\n  async getUserGroups(id) {\n    assertID(id);\n    const json = await this.get('/ISteamUser/GetUserGroupList/v1', {\n      steamid: id\n    });\n    if (!json.response.success) throw new Error(json.response.message);\n    return json.response.groups.map(group => group.gid);\n  }\n  /**\n   * Gets servers on steamcommunity.com/dev/managegameservers using your key\n   * @returns Your server\n   */\n  async getUserServers() {\n    return new UserServers((await this.get('/IGameServersService/GetAccountList/v1')).response);\n  }\n  /**\n   * Get users summary. If an array of IDs is passed in, this returns an array of UserSummary\n   * @param id User ID(s)\n   * @returns Summary\n   */\n  async getUserSummary(id) {\n    assertID(id);\n    const arr = Array.isArray(id);\n    const json = await this.get('/ISteamUser/GetPlayerSummaries/v2', {\n      steamids: arr ? id.join(',') : id\n    });\n    if (!json.response.players.length) throw new Error('No players found');\n    const summaries = json.response.players.map(player => new UserSummary(player));\n    return arr ? summaries : summaries[0];\n  }\n  /**\n   * Gets the Steam server's time\n   * @returns Date object from the server\n   */\n  async getServerTime() {\n    const json = await this.get('/ISteamWebAPIUtil/GetServerInfo/v1');\n    return new Date(json.servertime * 1000);\n  }\n  /**\n   * Gets all the countries\n   * @returns Array of country objects with fields countrycode, hasstates, and countryname\n   */\n  async getCountries() {\n    return await this.get('/QueryLocations', {}, this.baseActions);\n  }\n  /**\n   * Gets all the states for a particular country\n   * @returns Array of state objects with fields countrycode, statecode, and statename\n   */\n  async getStates(countryCode) {\n    return await this.get(`/QueryLocations/${countryCode}`, {}, this.baseActions);\n  }\n  /**\n   * Gets all the cities for a particular state\n   * @returns Array of city objects with fields countrycode, statecode, cityname and cityid\n   */\n  async getCities(countryCode, stateCode) {\n    return await this.get(`/QueryLocations/${countryCode}/${stateCode}`, {}, this.baseActions);\n  }\n  /**\n   * Gets servers using Master Server Query Protocol filtering\n   * @param filter Filter as defined by the [Master Server Query Protocol](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Filter).\n   * Although a filter is not stricly required, you probably want to at least use something like \\appid\\[appid] to filter by app\n   * @param count Number of results to return. 100 by default\n   */\n  async getServerList(filter = '', count = 100) {\n    const json = await this.get('/IGameServersService/GetServerList/v1', {\n      filter,\n      count\n    });\n    return json.response.servers.map(server => new GameServer(server));\n  }\n}","map":{"version":3,"names":["SteamID","querystring","createRequire","require","import","meta","url","Package","MemoryCacheMap","fetch","assertApp","assertID","UserStats","NewsPost","Server","Game","GameInfo","GameInfoExtended","GameInfoBasic","GameServer","UserAchievements","UserBadges","UserPlaytime","UserBans","UserFriend","UserServers","UserSummary","defaultOptions","language","currency","headers","version","name","baseAPI","baseStore","baseActions","inMemoryCacheEnabled","gameDetailCacheEnabled","gameDetailCacheTTL","userResolveCacheEnabled","userResolveCacheTTL","SteamAPI","reProfileBase","String","raw","reCommunityID","RegExp","reSteamID2","reSteamID3","reProfileURL","reProfileID","SUCCESS_CODE","gameDetailCache","userResolveCache","key","constructor","options","console","warn","join","get","path","params","base","stringify","resolve","query","communityIDMatch","match","urlMatch","steamID2Match","sid","getSteamID64","steamID3Match","idMatch","id","cachedID","json","vanityurl","response","success","Error","message","set","steamid","TypeError","getFeaturedCategories","l","cc","getFeaturedGames","getGameDetails","app","filters","isArr","Array","isArray","cached","details","appids","length","then","filtered","k","v","Object","entries","d","data","keys","getAppList","applist","apps","getServers","host","addr","servers","map","server","getGamePlayers","appid","result","player_count","getGameSchema","game","getUserAchievements","playerstats","getGameAchievementPercentages","gameid","achievementpercentages","achievements","getUserStats","getGameNews","maxlength","maxContentLength","enddate","endDate","getTime","count","feeds","tags","undefined","appnews","newsitems","item","getUserBadges","getUserLevel","player_level","getUserOwnedGames","opts","includeFreeGames","includeExtendedAppInfo","includeAppInfo","include_appinfo","include_played_free_games","include_free_sub","includeFreeSubGames","skip_unvetted_apps","includeUnvettedApps","include_extended_appinfo","appids_filter","filterApps","games","getUserRecentGames","getUserBans","arr","steamids","bans","players","player","getUserFriends","friendslist","friends","friend","getUserGroups","groups","group","gid","getUserServers","getUserSummary","summaries","getServerTime","Date","servertime","getCountries","getStates","countryCode","getCities","stateCode","getServerList","filter"],"sources":["C:/Users/union/Documents/reactcotc/cotc/node_modules/steamapi/dist/src/SteamAPI.js"],"sourcesContent":["import SteamID from 'steamid';\nimport querystring from 'node:querystring';\n// https://stackoverflow.com/a/66726426/7504056\nimport { createRequire } from 'node:module';\nconst require = createRequire(import.meta.url);\nconst Package = require('../../package.json');\nimport { MemoryCacheMap } from './Cache.js';\nimport { fetch, assertApp, assertID } from './utils.js';\nimport UserStats from './structures/UserStats.js';\nimport NewsPost from './structures/NewsPost.js';\nimport Server from './structures/Server.js';\nimport Game from './structures/Game.js';\nimport GameInfo from './structures/GameInfo.js';\nimport GameInfoExtended from './structures/GameInfoExtended.js';\nimport GameInfoBasic from './structures/GameInfoBasic.js';\nimport GameServer from './structures/GameServer.js';\nimport UserAchievements from './structures/UserAchievements.js';\nimport UserBadges from './structures/UserBadges.js';\nimport UserPlaytime from './structures/UserPlaytime.js';\nimport UserBans from './structures/UserBans.js';\nimport UserFriend from './structures/UserFriend.js';\nimport UserServers from './structures/UserServers.js';\nimport UserSummary from './structures/UserSummary.js';\nconst defaultOptions = {\n    language: 'english',\n    currency: 'us',\n    headers: { 'User-Agent': `SteamAPI/${Package.version} (https://www.npmjs.com/package/${Package.name})` },\n    baseAPI: 'https://api.steampowered.com',\n    baseStore: 'https://store.steampowered.com/api',\n    baseActions: 'https://steamcommunity.com/actions',\n    inMemoryCacheEnabled: true,\n    gameDetailCacheEnabled: true,\n    gameDetailCacheTTL: 86400000,\n    userResolveCacheEnabled: true,\n    userResolveCacheTTL: 86400000,\n};\nexport default class SteamAPI {\n    static reProfileBase = String.raw `(?:(?:(?:(?:https?)?:\\/\\/)?(?:www\\.)?steamcommunity\\.com)?)?\\/?`;\n    static reCommunityID = RegExp(String.raw `^(\\d{17})$`, 'i');\n    static reSteamID2 = RegExp(String.raw `^(STEAM_\\d+:\\d+:\\d+)$`, 'i');\n    static reSteamID3 = RegExp(String.raw `^(\\[U:\\d+:\\d+\\])$`, 'i');\n    static reProfileURL = RegExp(String.raw `${this.reProfileBase}profiles\\/(\\d{17})`, 'i');\n    static reProfileID = RegExp(String.raw `${this.reProfileBase}id\\/([a-z0-9_-]{2,32})`, 'i');\n    static SUCCESS_CODE = 1;\n    language;\n    currency;\n    headers;\n    baseAPI;\n    baseStore;\n    baseActions;\n    gameDetailCache;\n    userResolveCache;\n    key = '';\n    /**\n     * Make a new SteamAPI Client\n     * @param key Key to use for API calls. Key can be generated at https://steamcommunity.com/dev/apikey. If you want to make requests without a key, pass in false\n     * @param options Custom options for default language, HTTP parameters, and caching\n     */\n    constructor(key, options = {}) {\n        if (key !== false) {\n            if (key) {\n                this.key = key;\n            }\n            else {\n                console.warn([\n                    'no key provided',\n                    'some methods won\\'t work',\n                    'get one from https://goo.gl/DfNy5s or initialize SteamAPI as new SteamAPI(false) to suppress this warning'\n                ].join('\\n'));\n            }\n        }\n        options = { ...defaultOptions, ...options };\n        if (options.inMemoryCacheEnabled) {\n            if (options.gameDetailCacheEnabled && options.gameDetailCacheTTL)\n                this.gameDetailCache = new MemoryCacheMap(options.gameDetailCacheTTL);\n            if (options.userResolveCacheEnabled && options.userResolveCacheTTL)\n                this.userResolveCache = new MemoryCacheMap(options.userResolveCacheTTL);\n        }\n        this.language = options.language;\n        this.currency = options.currency;\n        this.headers = options.headers;\n        this.baseAPI = options.baseAPI;\n        this.baseStore = options.baseStore;\n        this.baseActions = options.baseActions;\n    }\n    /**\n     * Used to make any GET request to the Steam API\n     * @param path Path to request e.g '/IPlayerService/GetOwnedGames/v1?steamid=76561198378422474'\n     * @param base Base API URL\n     * @returns Parse JSON\n     */\n    get(path, params = {}, base = this.baseAPI) {\n        if (this.key)\n            params.key = this.key;\n        return fetch(`${base}${path}?${querystring.stringify(params)}`, this.headers);\n    }\n    /**\n     * Resolve runs through a couple different methods for finding a user's profile ID based on\n     * either their id, username, profile url, vanity url, steamID2, or steamID3.\n     * Rejects promise if a profile couldn't be resolved\n     * @param query Something to resolve like https://steamcommunity.com/id/xDim\n     * @returns Profile ID\n     */\n    async resolve(query) {\n        // community id match, ex. 76561198378422474\n        const communityIDMatch = query.match(SteamAPI.reCommunityID);\n        if (communityIDMatch !== null)\n            return communityIDMatch[1];\n        // url, https://steamcommunity.com/profiles/76561198378422474\n        const urlMatch = query.match(SteamAPI.reProfileURL);\n        if (urlMatch !== null)\n            return urlMatch[1];\n        // Steam 2: STEAM_0:0:209078373\n        const steamID2Match = query.match(SteamAPI.reSteamID2);\n        if (steamID2Match !== null) {\n            const sid = new SteamID(steamID2Match[1]);\n            return sid.getSteamID64();\n        }\n        // Steam 3: [U:1:418156746]\n        const steamID3Match = query.match(SteamAPI.reSteamID3);\n        if (steamID3Match !== null) {\n            const sid = new SteamID(steamID3Match[1]);\n            return sid.getSteamID64();\n        }\n        // vanity id, https://steamcommunity.com/id/xDim\n        const idMatch = query.match(SteamAPI.reProfileID);\n        if (idMatch !== null) {\n            const id = idMatch[1];\n            const cachedID = this.userResolveCache?.get(id);\n            if (cachedID)\n                return cachedID;\n            const json = await this.get('/ISteamUser/ResolveVanityURL/v1', { vanityurl: id });\n            if (json.response.success !== SteamAPI.SUCCESS_CODE)\n                throw new Error(json.response.message);\n            if (this.userResolveCache)\n                this.userResolveCache.set(id, json.response.steamid);\n            return json.response.steamid;\n        }\n        throw new TypeError('Invalid format');\n    }\n    /**\n     * Gets featured categories on Steam store\n     *\n     * <warn>undocumented endpoint -- may be unstable</warn>\n     * @param options More options\n     * @param options.language The language\n     * @param options.currency The currency\n     */\n    getFeaturedCategories({ language = this.language, currency = this.currency } = {}) {\n        // TODO: make class for this\n        return this.get('/featuredcategories', { l: language, cc: currency }, this.baseStore);\n    }\n    /**\n     * Gets featured games on Steam store\n     *\n     * <warn>undocumented endpoint -- may be unstable</warn>\n     * @param options More options\n     * @param options.language The language\n     * @param options.currency The currency\n     */\n    getFeaturedGames({ language = this.language, currency = this.currency } = {}) {\n        // TODO: make class for this\n        return this.get('/featured', { l: language, cc: currency }, this.baseStore);\n    }\n    /**\n     * Get details for app ID. If an array of more than one app ID is passed in, the parameter &filters=price_overview\n     * will be added to the request since otherwise the server would respond with null\n     *\n     * Note: a game will not have a price_overview field if it is F2P\n     *\n     * <warn>If the array contains invalid app IDs, they will be filtered out</warn>\n     *\n     * <warn>Requests for this endpoint are limited to 200 every 5 minutes</warn>\n     *\n     * <warn>Not every `currency` is supported. Only the following are valid: `us, ca, cc, es, de, fr, ru, nz, au, uk`.</warn>\n     *\n     * <warn>Not every `language` is supported. A list of available languages can be found [here](https://www.ibabbleon.com/Steam-Supported-Languages-API-Codes.html).</warn>\n     * @param app App ID or array of App IDs\n     * @param options More options\n     * @param options.language The language\n     * @param options.currency The currency\n     * @param options.filters Fields to restrict the return results to\n     * @returns If app is number, returns single object. If app is array, returns a mapping of app IDs to objects\n     */\n    async getGameDetails(app, { language = this.language, currency = this.currency, filters = [] } = {}) {\n        assertApp(app);\n        const isArr = Array.isArray(app);\n        const key = `${app}-${currency}-${language}`;\n        // For now we're not touching the cache if an array of apps is passed\n        // TODO: maybe cache apps individually if an array is passed?\n        if (!isArr) {\n            const cached = this.gameDetailCache?.get(key);\n            if (cached)\n                return cached;\n        }\n        const details = await this\n            .get('/appdetails', {\n            appids: isArr ? app.join(',') : app,\n            cc: currency,\n            l: language,\n            filters: isArr && app.length > 1 ? 'price_overview' : filters.join(','),\n        }, this.baseStore)\n            .then(json => {\n            if (json === null)\n                throw new Error('Failed to find app ID');\n            // TODO: make a class\n            const filtered = {};\n            for (const [k, v] of Object.entries(json))\n                if (v.success) {\n                    const d = v.data;\n                    // Convert empty arrays to empty objects for consistency\n                    filtered[k] = Array.isArray(d) && d.length === 0 ? {} : d;\n                }\n            if (Object.keys(filtered).length === 0)\n                throw new Error('Failed to find app ID');\n            return isArr ? filtered : filtered[app];\n        });\n        if (!isArr)\n            this.gameDetailCache?.set(key, details);\n        return details;\n    }\n    /**\n     * Get every single app on steam\n     *\n     * Note: Original JSON names are being preserved instead of converting\n     * each element to a class here because there are 186311+ games\n     * that would have to be made into a class.\n     * @returns Array of very basic app info (ID + name)\n     */\n    async getAppList() {\n        // TODO: allow a parameter to be passed in to convert these to a class?\n        return (await this.get('/ISteamApps/GetAppList/v2')).applist.apps;\n    }\n    /**\n     * Get every server associated with a particular host\n     * @param host Host to query (IPv4 or IPv4:queryport)\n     * @returns Info of servers\n     */\n    async getServers(host) {\n        const { response } = await this.get('/ISteamApps/GetServersAtAddress/v1', { addr: host });\n        if (!response.success)\n            throw new Error(response.message);\n        return response.servers.map((server) => new Server(server));\n    }\n    /**\n     * Get number of current players for app ID\n     * @param app App ID to get number of current players for\n     * @returns Number of current players\n     */\n    async getGamePlayers(app) {\n        assertApp(app);\n        const json = await this.get('/ISteamUserStats/GetNumberOfCurrentPlayers/v1', { appid: app });\n        if (json.response.result !== SteamAPI.SUCCESS_CODE)\n            throw new Error('No app found');\n        return json.response.player_count;\n    }\n    /**\n     * Get schema for app ID\n     * @param app App ID to get schema for\n     * @param language Language to return strings for (note: does not seem to affect stats; only achievements)\n     * @returns Schema\n     */\n    async getGameSchema(app, language = this.language) {\n        assertApp(app);\n        // TODO: make class for this\n        return (await this.get('/ISteamUserStats/GetSchemaForGame/v2', { appid: app, l: language })).game;\n    }\n    /**\n     * Get a user's achievements for app ID\n     * @param id Steam ID of user\n     * @param app App ID to get achievements for\n     * @param language Language to return strings for\n     * @returns Achievements\n     */\n    async getUserAchievements(id, app, language = this.language) {\n        assertID(id);\n        assertApp(app);\n        const json = await this.get('/ISteamUserStats/GetPlayerAchievements/v1', { steamid: id, appid: app, l: language });\n        if (!json.playerstats.success)\n            throw new Error(json.playerstats.message);\n        return new UserAchievements(json.playerstats);\n    }\n    /**\n     * Get achievement percentages for app ID\n     *\n     * If a game does not hvae any achievements, this will error\n     * @param app App ID to get achievement progress for\n     * @returns Array of object with achievement name and percentage for app ID\n     */\n    async getGameAchievementPercentages(app) {\n        assertApp(app);\n        const json = await this.get('/ISteamUserStats/GetGlobalAchievementPercentagesForApp/v2', { gameid: app });\n        return json.achievementpercentages.achievements;\n    }\n    /**\n     * Get a user's stats for app ID\n     * @param id Steam ID of user\n     * @param app App ID to get user stats for\n     * @returns Stats for app ID\n     */\n    async getUserStats(id, app) {\n        assertID(id);\n        assertApp(app);\n        return new UserStats((await this.get('/ISteamUserStats/GetUserStatsForGame/v2', { steamid: id, appid: app })).playerstats);\n    }\n    /**\n     * Get news for app ID\n     * @param app App ID\n     * @param options Additional options for filtering posts\n     * @returns App news for ID\n     */\n    async getGameNews(app, options = {}) {\n        assertApp(app);\n        const params = {\n            appid: app,\n            maxlength: options.maxContentLength,\n            enddate: options.endDate?.getTime(),\n            count: options.count,\n            feeds: options.feeds?.join(','),\n            tags: options.tags?.join(','),\n        };\n        // Filter out options that weren't supplied\n        for (const [k, v] of Object.entries(params))\n            if (v === undefined)\n                delete params[k];\n        return (await this.get('/ISteamNews/GetNewsForApp/v2', params)).appnews.newsitems.map((item) => new NewsPost(item));\n    }\n    /**\n     * Get a user's badges\n     * @param id User ID\n     * @returns User level info and badges\n     */\n    async getUserBadges(id) {\n        assertID(id);\n        return new UserBadges((await this.get('/IPlayerService/GetBadges/v1', { steamid: id })).response);\n    }\n    /**\n     * Get a user's level\n     * @param id User ID\n     * @returns The user's Steam level\n     */\n    async getUserLevel(id) {\n        assertID(id);\n        return (await this.get('/IPlayerService/GetSteamLevel/v1', { steamid: id })).response.player_level;\n    }\n    /**\n     * Get users owned games.\n     * @param id User ID\n     * @param opts Additional options for filtering\n     * @returns Owned games\n     */\n    async getUserOwnedGames(id, opts = {}) {\n        assertID(id);\n        // Same behavior as v3\n        if (opts.includeFreeGames === undefined)\n            opts.includeFreeGames = true;\n        if (opts.language === undefined)\n            opts.language = this.language;\n        if (opts.includeExtendedAppInfo)\n            opts.includeAppInfo = true;\n        const params = {\n            steamid: id,\n            include_appinfo: opts.includeAppInfo,\n            include_played_free_games: opts.includeFreeGames,\n            include_free_sub: opts.includeFreeSubGames,\n            skip_unvetted_apps: opts.includeUnvettedApps === undefined ? undefined : !opts.includeUnvettedApps,\n            include_extended_appinfo: opts.includeExtendedAppInfo,\n            appids_filter: opts.filterApps,\n            language: opts.language,\n        };\n        // Filter out options that weren't supplied\n        for (const [k, v] of Object.entries(params))\n            if (v === undefined)\n                delete params[k];\n        const json = await this.get('/IPlayerService/GetOwnedGames/v1', params);\n        return json.response.games.map((data) => {\n            let game;\n            if (opts.includeExtendedAppInfo)\n                game = new GameInfoExtended(data);\n            else if (opts.includeAppInfo)\n                game = new GameInfo(data);\n            else\n                game = new Game(data);\n            return new UserPlaytime(data, game);\n        });\n    }\n    /**\n     * Get a user's recently played games. Note: <UserPlaytime>.game is GameInfo not just Game\n     *\n     * Like getUserOwnedGames() but only returns games played in the last 2 weeks\n     * @param id User ID\n     * @param count Number of results to limit the request to (0 means no limit)\n     * @returns Recently played games and their play times\n     */\n    async getUserRecentGames(id, count = 0) {\n        assertID(id);\n        const json = await this.get('/IPlayerService/GetRecentlyPlayedGames/v1', { steamid: id, count });\n        return json.response.games.map((data) => new UserPlaytime(data, new GameInfoBasic(data)));\n    }\n    /**\n     * Get a user's or multipler users' bans. If an array of IDs is passed in, this returns an array of UserBans\n     * @param id User ID(s)\n     * @returns Ban info\n     */\n    async getUserBans(id) {\n        assertID(id);\n        const arr = Array.isArray(id);\n        const json = await this.get('/ISteamUser/GetPlayerBans/v1', {\n            steamids: arr ? id.join(',') : id,\n        });\n        const bans = json.players.map((player) => new UserBans(player));\n        return arr ? bans : bans[0];\n    }\n    /**\n     * Get a user's friends\n     * @param id User ID\n     * @returns The provided user's friends\n     */\n    async getUserFriends(id) {\n        assertID(id);\n        const json = await this.get('/ISteamUser/GetFriendList/v1', { steamid: id });\n        return json.friendslist.friends.map((friend) => new UserFriend(friend));\n    }\n    /**\n     * Get the groups the user is a member of\n     * @param id User ID\n     * @returns Group IDs\n     */\n    async getUserGroups(id) {\n        assertID(id);\n        const json = await this.get('/ISteamUser/GetUserGroupList/v1', { steamid: id });\n        if (!json.response.success)\n            throw new Error(json.response.message);\n        return json.response.groups.map((group) => group.gid);\n    }\n    /**\n     * Gets servers on steamcommunity.com/dev/managegameservers using your key\n     * @returns Your server\n     */\n    async getUserServers() {\n        return new UserServers((await this.get('/IGameServersService/GetAccountList/v1')).response);\n    }\n    /**\n     * Get users summary. If an array of IDs is passed in, this returns an array of UserSummary\n     * @param id User ID(s)\n     * @returns Summary\n     */\n    async getUserSummary(id) {\n        assertID(id);\n        const arr = Array.isArray(id);\n        const json = await this.get('/ISteamUser/GetPlayerSummaries/v2', { steamids: arr ? id.join(',') : id });\n        if (!json.response.players.length)\n            throw new Error('No players found');\n        const summaries = json.response.players.map((player) => new UserSummary(player));\n        return arr ? summaries : summaries[0];\n    }\n    /**\n     * Gets the Steam server's time\n     * @returns Date object from the server\n     */\n    async getServerTime() {\n        const json = await this.get('/ISteamWebAPIUtil/GetServerInfo/v1');\n        return new Date(json.servertime * 1000);\n    }\n    /**\n     * Gets all the countries\n     * @returns Array of country objects with fields countrycode, hasstates, and countryname\n     */\n    async getCountries() {\n        return (await this.get('/QueryLocations', {}, this.baseActions));\n    }\n    /**\n     * Gets all the states for a particular country\n     * @returns Array of state objects with fields countrycode, statecode, and statename\n     */\n    async getStates(countryCode) {\n        return (await this.get(`/QueryLocations/${countryCode}`, {}, this.baseActions));\n    }\n    /**\n     * Gets all the cities for a particular state\n     * @returns Array of city objects with fields countrycode, statecode, cityname and cityid\n     */\n    async getCities(countryCode, stateCode) {\n        return (await this.get(`/QueryLocations/${countryCode}/${stateCode}`, {}, this.baseActions));\n    }\n    /**\n     * Gets servers using Master Server Query Protocol filtering\n     * @param filter Filter as defined by the [Master Server Query Protocol](https://developer.valvesoftware.com/wiki/Master_Server_Query_Protocol#Filter).\n     * Although a filter is not stricly required, you probably want to at least use something like \\appid\\[appid] to filter by app\n     * @param count Number of results to return. 100 by default\n     */\n    async getServerList(filter = '', count = 100) {\n        const json = await this.get('/IGameServersService/GetServerList/v1', { filter, count });\n        return json.response.servers.map((server) => new GameServer(server));\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}